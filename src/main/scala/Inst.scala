package simplecpu.inst;

import chisel3._
import chisel3.util._
import chisel3.experimental._
import chisel3.util.experimental._

trait RV32I {
    def lui   = BitPat("b????????????????????_?????_0110111")
    def auipc = BitPat("b????????????????????_?????_0010111")
    def jal   = BitPat("b????????????????????_?????_1101111")
    def jalr  = BitPat("b????????????_?????_000_?????_1100111")

    def beq  = BitPat("b???????_?????_?????_000_?????_1100011")
    def bne  = BitPat("b???????_?????_?????_001_?????_1100011")
    def blt  = BitPat("b???????_?????_?????_100_?????_1100011")
    def bge  = BitPat("b???????_?????_?????_101_?????_1100011")
    def bltu = BitPat("b???????_?????_?????_110_?????_1100011")
    def bgeu = BitPat("b???????_?????_?????_111_?????_1100011")

    def lb  = BitPat("b????????????_?????_000_?????_0000011")
    def lh  = BitPat("b????????????_?????_001_?????_0000011")
    def lw  = BitPat("b????????????_?????_010_?????_0000011")
    def lbu = BitPat("b????????????_?????_100_?????_0000011")
    def lhu = BitPat("b????????????_?????_101_?????_0000011")

    def sb = BitPat("b????????????_?????_000_?????_0100011")
    def sh = BitPat("b????????????_?????_001_?????_0100011")
    def sw = BitPat("b????????????_?????_010_?????_0100011")

    def addi  = BitPat("b????????????_?????_000_?????_0010011")
    def slti  = BitPat("b????????????_?????_010_?????_0010011")
    def sltiu = BitPat("b????????????_?????_011_?????_0010011")
    def xori  = BitPat("b????????????_?????_100_?????_0010011")
    def ori   = BitPat("b????????????_?????_110_?????_0010011")
    def andi  = BitPat("b????????????_?????_111_?????_0010011")

    def slli = BitPat("b000000?_?????_?????_001_?????_0010011")
    def srli = BitPat("b000000?_?????_?????_101_?????_0010011")
    def srai = BitPat("b010000?_?????_?????_101_?????_0010011")

    def add  = BitPat("b0000000_?????_?????_000_?????_0110011")
    def sub  = BitPat("b0100000_?????_?????_000_?????_0110011")
    def sll  = BitPat("b000000?_?????_?????_001_?????_0110011")
    def slt  = BitPat("b0000000_?????_?????_010_?????_0110011")
    def sltu = BitPat("b0000000_?????_?????_011_?????_0110011")
    def xor  = BitPat("b0000000_?????_?????_100_?????_0110011")
    def srl  = BitPat("b000000?_?????_?????_101_?????_0110011")
    def sra  = BitPat("b010000?_?????_?????_101_?????_0110011")
    def or   = BitPat("b0000000_?????_?????_110_?????_0110011")
    def and  = BitPat("b0000000_?????_?????_111_?????_0110011")

    def fence = BitPat("b0000????????_00000_000_00000_0001111")

    def sfence_vma = BitPat("b0001001_?????_?????_000_?????_1110011")
    def ecall      = BitPat("b000000000000_00000_000_00000_1110011")
    def ebreak     = BitPat("b000000000001_00000_000_00000_1110011")

    def mret = BitPat("b0011000_00010_00000_000_00000_1110011")
    def sret = BitPat("b0001000_00010_00000_000_00000_1110011")
    def uret = BitPat("b0000000_00010_00000_000_00000_1110011")
    def wfi  = BitPat("b0001000_00101_00000_000_00000_1110011")
}

trait RV64I extends RV32I {
    def ld  = BitPat("b????????????_?????_011_?????_0000011")
    def lwu = BitPat("b????????????_?????_110_?????_0000011")

    def sd = BitPat("b????????????_?????_011_?????_0100011")

    def addiw = BitPat("b????????????_?????_000_?????_0011011")

    def slliw = BitPat("b0000000_?????_?????_001_?????_0011011")
    def srliw = BitPat("b0000000_?????_?????_101_?????_0011011")
    def sraiw = BitPat("b0100000_?????_?????_101_?????_0011011")

    def addw = BitPat("b0000000_?????_?????_000_?????_0111011")
    def subw = BitPat("b0100000_?????_?????_000_?????_0111011")
    def sllw = BitPat("b000000?_?????_?????_001_?????_0111011")
    def srlw = BitPat("b000000?_?????_?????_101_?????_0111011")
    def sraw = BitPat("b010000?_?????_?????_101_?????_0111011")
}

trait Zicsr {
    def csrrw  = BitPat("b????????????_?????_001_?????_1110011")
    def csrrs  = BitPat("b????????????_?????_010_?????_1110011")
    def csrrc  = BitPat("b????????????_?????_011_?????_1110011")
    def csrrwi = BitPat("b????????????_?????_101_?????_1110011")
    def csrrsi = BitPat("b????????????_?????_110_?????_1110011")
    def csrrci = BitPat("b????????????_?????_111_?????_1110011")
}

trait Zifencei {
    def fence_i = BitPat("b000000000000_00000_001_00000_0001111")
}

trait RV32M {
    def mul    = BitPat("b0000001_?????_?????_000_?????_0110011")
    def mulh   = BitPat("b0000001_?????_?????_001_?????_0110011")
    def mulhsu = BitPat("b0000001_?????_?????_010_?????_0110011")
    def mulhu  = BitPat("b0000001_?????_?????_011_?????_0110011")
    def div    = BitPat("b0000001_?????_?????_100_?????_0110011")
    def divu   = BitPat("b0000001_?????_?????_101_?????_0110011")
    def rem    = BitPat("b0000001_?????_?????_110_?????_0110011")
    def remu   = BitPat("b0000001_?????_?????_111_?????_0110011")
}

trait RV64M extends RV32M {
    def mulw  = BitPat("b0000001_?????_?????_000_?????_0111011")
    def divw  = BitPat("b0000001_?????_?????_100_?????_0111011")
    def divuw = BitPat("b0000001_?????_?????_101_?????_0111011")
    def remw  = BitPat("b0000001_?????_?????_110_?????_0111011")
    def remuw = BitPat("b0000001_?????_?????_111_?????_0111011")
}

trait RV32A {
    def lr_w      = BitPat("b00010??_00000_?????_010_?????_0101111")
    def sc_w      = BitPat("b00011??_00000_?????_010_?????_0101111")
    def amoadd_w  = BitPat("b00000??_?????_?????_010_?????_0101111")
    def amoswap_w = BitPat("b00001??_?????_?????_010_?????_0101111")
    def amoxor_w  = BitPat("b00100??_?????_?????_010_?????_0101111")
    def amoand_w  = BitPat("b01100??_?????_?????_010_?????_0101111")
    def amoor_w   = BitPat("b01000??_?????_?????_010_?????_0101111")
    def amomin_w  = BitPat("b10000??_?????_?????_010_?????_0101111")
    def amomax_w  = BitPat("b10100??_?????_?????_010_?????_0101111")
    def amominu_w = BitPat("b11000??_?????_?????_010_?????_0101111")
    def amomaxu_w = BitPat("b11100??_?????_?????_010_?????_0101111")
}

trait RV64A extends RV32A {
    def lr_d      = BitPat("b00010??_00000_?????_011_?????_0101111")
    def sc_d      = BitPat("b00011??_00000_?????_011_?????_0101111")
    def amoadd_d  = BitPat("b00000??_?????_?????_011_?????_0101111")
    def amoswap_d = BitPat("b00001??_?????_?????_011_?????_0101111")
    def amoxor_d  = BitPat("b00100??_?????_?????_011_?????_0101111")
    def amoand_d  = BitPat("b01100??_?????_?????_011_?????_0101111")
    def amoor_d   = BitPat("b01000??_?????_?????_011_?????_0101111")
    def amomin_d  = BitPat("b10000??_?????_?????_011_?????_0101111")
    def amomax_d  = BitPat("b10100??_?????_?????_011_?????_0101111")
    def amominu_d = BitPat("b11000??_?????_?????_011_?????_0101111")
    def amomaxu_d = BitPat("b11100??_?????_?????_011_?????_0101111")
}

// Too complicated, not checked yet
trait CommonRVC {
    def addi4spn = BitPat("b000_????????_???_00")
    def fld      = BitPat("b001_???_???_??_???_00")
    def lw       = BitPat("b010_???_???_??_???_00")
    // def ld       = BitPat("b011_???_???_??_???_00")
    def fsd = BitPat("b101_???_???_??_???_00")
    def sw  = BitPat("b110_???_???_??_???_00")
    // def sd       = BitPat("b111_???_???_??_???_00")

    def addi = BitPat("b000_?_?????_?????_01")
    // def addiw    = BitPat("b001_?_?????_?????_01")
    def li     = BitPat("b010_?_?????_?????_01")
    def addi16sp = BitPat("b011_?_00010_?????_01")
    def lui      = BitPat("b011_?_?????_?????_01")
    def srli     = BitPat("b100_?_00_???_?????_01")
    def srai     = BitPat("b100_?_01_???_?????_01")
    def andi     = BitPat("b100_?_10_???_?????_01")
    def sub      = BitPat("b100_0_11_???_00_???_01")
    def xor      = BitPat("b100_0_11_???_01_???_01")
    def or       = BitPat("b100_0_11_???_10_???_01")
    def and      = BitPat("b100_0_11_???_11_???_01")
    def subw     = BitPat("b100_1_11_???_00_???_01")
    def addw     = BitPat("b100_1_11_???_01_???_01")
    def j        = BitPat("b101_???????????_01")
    def beqz     = BitPat("b110_???_???_?????_01")
    def bnez     = BitPat("b111_???_???_?????_01")

    def slli  = BitPat("b000_?_?????_?????_10")
    def fldsp = BitPat("b001_?_?????_?????_10")
    def lwsp  = BitPat("b010_?_?????_?????_10")
    // def ldsp   = BitPat("b011_?_?????_?????_10")
    def jr     = BitPat("b100_0_?????_00000_10")
    def mv     = BitPat("b100_0_?????_?????_10")
    def ebreak = BitPat("b100_1_00000_00000_10")
    def jalr   = BitPat("b100_1_?????_00000_10")
    def add    = BitPat("b100_1_?????_?????_10")
    def fsdsp  = BitPat("b101_??????_?????_10")
    def swsp   = BitPat("b110_??????_?????_10")
    // def sdsp   = BitPat("b111_??????_?????_10")
}

trait RV32C extends CommonRVC {
    def flw   = BitPat("b011_???_???_??_???_00")
    def fsw   = BitPat("b111_???_???_??_???_00")
    def jal   = BitPat("b001_?_?????_?????_01")
    def flwsp = BitPat("b011_?_?????_?????_10")
    def fswsp = BitPat("b111_??????_?????_10")
}

trait RV64C extends CommonRVC {
    def ld    = BitPat("b011_???_???_??_???_00")
    def sd    = BitPat("b111_???_???_??_???_00")
    def addiw = BitPat("b001_?_?????_?????_01")
    def ldsp  = BitPat("b011_?_?????_?????_10")
    def sdsp  = BitPat("b111_??????_?????_10")
}

// Generated by GPT4, Not manually checked yet
trait RV32F {
    def flw       = BitPat("b????????????_?????_010_?????_0000111")
    def fsw       = BitPat("b????????????_?????_010_?????_0100111")
    def fmadd_s   = BitPat("b?????_00_?????_?????_?????_1000011")
    def fmsub_s   = BitPat("b?????_00_?????_?????_?????_1000111")
    def fnmsub_s  = BitPat("b?????_00_?????_?????_?????_1001011")
    def fnmadd_s  = BitPat("b?????_00_?????_?????_?????_1001111")
    def fadd_s    = BitPat("b0000000_?????_?????_?????_1010011")
    def fsub_s    = BitPat("b0000100_?????_?????_?????_1010011")
    def fmul_s    = BitPat("b0001000_?????_?????_?????_1010011")
    def fdiv_s    = BitPat("b0001100_?????_?????_?????_1010011")
    def fsqrt_s   = BitPat("b0101100_00000_?????_?????_1010011")
    def fsgnj_s   = BitPat("b0010000_?????_?????_?????_1010011")
    def fsgnjn_s  = BitPat("b0010000_?????_?????_?????_1010011")
    def fsgnjx_s  = BitPat("b0010100_?????_?????_?????_1010011")
    def fmin_s    = BitPat("b0010100_?????_?????_?????_1010011")
    def fmax_s    = BitPat("b0010100_?????_?????_?????_1010011")
    def fcvt_w_s  = BitPat("b1100000_00000_?????_?????_1010011")
    def fcvt_wu_s = BitPat("b1100000_00001_?????_?????_1010011")
    def fmv_x_w   = BitPat("b1110000_00000_?????_?????_1010011")
    def feq_s     = BitPat("b1010000_?????_?????_?????_1010011")
    def flt_s     = BitPat("b1010000_?????_?????_?????_1010011")
    def fle_s     = BitPat("b1010000_?????_?????_?????_1010011")
    def fclass_s  = BitPat("b1110000_00000_?????_?????_1010011")
    def fcvt_s_w  = BitPat("b1101000_00000_?????_?????_1010011")
    def fcvt_s_wu = BitPat("b1101000_00001_?????_?????_1010011")
    def fmv_w_x   = BitPat("b1111000_00000_?????_?????_1010011")
}

// Generated by GPT4, Not manually checked yets
trait RV64F extends RV32F {
    def fcvt_l_s  = BitPat("b1100000_00010_?????_?????_1010011")
    def fcvt_lu_s = BitPat("b1100000_00011_?????_?????_1010011")
    def fcvt_s_l  = BitPat("b1101000_00010_?????_?????_1010011")
    def fcvt_s_lu = BitPat("b1101000_00011_?????_?????_1010011")
}

// Generated by GPT4, Not manually checked yets
trait RV32D {
    def fld       = BitPat("b????????????_?????_011_?????_0000111")
    def fsd       = BitPat("b????????????_?????_011_?????_0100111")
    def fmadd_d   = BitPat("b?????_01_?????_?????_?????_1000011")
    def fmsub_d   = BitPat("b?????_01_?????_?????_?????_1000111")
    def fnmsub_d  = BitPat("b?????_01_?????_?????_?????_1001011")
    def fnmadd_d  = BitPat("b?????_01_?????_?????_?????_1001111")
    def fadd_d    = BitPat("b0000001_?????_?????_?????_1010011")
    def fsub_d    = BitPat("b0000101_?????_?????_?????_1010011")
    def fmul_d    = BitPat("b0001001_?????_?????_?????_1010011")
    def fdiv_d    = BitPat("b0001101_?????_?????_?????_1010011")
    def fsqrt_d   = BitPat("b0101101_00000_?????_?????_1010011")
    def fsgnj_d   = BitPat("b0010001_?????_?????_?????_1010011")
    def fsgnjn_d  = BitPat("b0010001_?_?????_?????_1010011")
    def fsgnjx_d  = BitPat("b0010101_?????_?????_?????_1010011")
    def fmin_d    = BitPat("b0010101_?????_?????_?????_1010011")
    def fmax_d    = BitPat("b0010101_?????_?????_?????_1010011")
    def fcvt_s_d  = BitPat("b0100000_00001_?????_?????_1010011")
    def fcvt_d_s  = BitPat("b0100001_00000_?????_?????_1010011")
    def feq_d     = BitPat("b1010001_?????_?????_?????_1010011")
    def flt_d     = BitPat("b1010001_?????_?????_?????_1010011")
    def fle_d     = BitPat("b1010001_?????_?????_?????_1010011")
    def fclass_d  = BitPat("b1110001_00000_?????_?????_1010011")
    def fcvt_w_d  = BitPat("b1100001_00000_?????_?????_1010011")
    def fcvt_wu_d = BitPat("b1100001_00001_?????_?????_1010011")
    def fcvt_d_w  = BitPat("b1101001_00000_?????_?????_1010011")
    def fcvt_d_wu = BitPat("b1101001_00001_?????_?????_1010011")
}

// Generated by GPT4, Not manually checked yets
trait RV64D extends RV32D {
    def fcvt_l_d  = BitPat("b1100001_00010_?????_?????_1010011")
    def fcvt_lu_d = BitPat("b1100001_00011_?????_?????_1010011")
    def fmv_x_d   = BitPat("b1110001_00000_?????_?????_1010011")
    def fmv_d_x   = BitPat("b1111001_00000_?????_?????_1010011")
    def fcvt_d_l  = BitPat("b1101001_00010_?????_?????_1010011")
    def fcvt_d_lu = BitPat("b1101001_00011_?????_?????_1010011")
}
